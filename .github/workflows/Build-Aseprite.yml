name: Build Aseprite

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  get-skia-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.result }}
    steps:
    - name: Get latest Skia version
      id: get-version
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data } = await github.rest.repos.getLatestRelease({
            owner: 'aseprite',
            repo: 'skia'
          });
          return data.tag_name;
        result-encoding: string

  build-windows:
    runs-on: windows-latest
    needs: get-skia-version
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Windows dependencies
      run: |
        choco install cmake ninja -y

    - name: Download Skia for Windows
      run: |
        $skiaVersion = "${{ needs.get-skia-version.outputs.version }}"
        $skiaUrl = "https://github.com/aseprite/skia/releases/download/$skiaVersion/Skia-Windows-Release-x64.zip"
        
        # 下载文件
        Write-Host "Downloading Skia from: $skiaUrl"
        Invoke-WebRequest -Uri $skiaUrl -OutFile "skia-windows.zip"
        
        # 检查文件大小
        $file = Get-Item "skia-windows.zip"
        if ($file.Length -lt 10000000) {
            Write-Host "Error: Downloaded file is too small ($($file.Length) bytes). Contents:"
            Get-Content "skia-windows.zip"
            exit 1
        }
        
        # 创建目标目录
        New-Item -ItemType Directory -Path "deps" -Force
        
        # 解压文件
        Expand-Archive -Path "skia-windows.zip" -DestinationPath "deps/skia"
        
        # 验证解压结果
        if (-not (Test-Path "deps/skia/out/Release-x64")) {
            Write-Host "Error: Skia extraction failed. Directory structure not found."
            exit 1
        }

    - name: Configure CMake for Windows
      run: |
        # 创建构建目录
        New-Item -ItemType Directory -Path "build" -Force
        cd build
        
        # 配置 CMake
        cmake -G Ninja `
          -DCMAKE_BUILD_TYPE=RelWithDebInfo `
          -DCMAKE_SYSTEM_VERSION=10.0.19041.0 `
          -DLAF_BACKEND=skia `
          -DSKIA_DIR="${{ github.workspace }}/deps/skia" `
          -DSKIA_LIBRARY_DIR="${{ github.workspace }}/deps/skia/out/Release-x64" `
          -DSKIA_LIBRARY="${{ github.workspace }}/deps/skia/out/Release-x64/skia.lib" `
          ..

    - name: Build with Ninja
      run: |
        cd build
        ninja aseprite

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-windows
        path: build/bin/aseprite.exe

  build-macos-intel:
    runs-on: macos-latest
    needs: get-skia-version
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install macOS dependencies
      run: |
        brew update
        brew uninstall --ignore-dependencies cmake || true
        brew install cmake ninja

    - name: Download Skia for macOS (Intel)
      run: |
        SKIA_VERSION="${{ needs.get-skia-version.outputs.version }}"
        SKIA_URL="https://github.com/aseprite/skia/releases/download/$SKIA_VERSION/Skia-macOS-Release-x64.zip"
        
        # 使用 curl 下载并验证文件大小
        echo "Downloading Skia from: $SKIA_URL"
        curl -L "$SKIA_URL" -o skia-macos.zip
        
        # 检查文件大小是否合理（至少 10MB）
        FILE_SIZE=$(stat -f%z skia-macos.zip)
        if [ "$FILE_SIZE" -lt 10000000 ]; then
            echo "Error: Downloaded file is too small ($FILE_SIZE bytes). Contents:"
            cat skia-macos.zip
            exit 1
        fi
        
        # 创建目标目录
        mkdir -p deps/skia
        
        # 解压文件
        unzip skia-macos.zip -d deps/skia
        
        # 验证解压结果
        if [ ! -d "deps/skia/out/Release-x64" ]; then
            echo "Error: Skia extraction failed. Directory structure not found."
            exit 1
        fi

    - name: Configure CMake for Intel
      run: |
        # 创建构建目录
        mkdir build
        cd build
        
        # 配置 CMake
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=$GITHUB_WORKSPACE/deps/skia \
          -DSKIA_LIBRARY_DIR=$GITHUB_WORKSPACE/deps/skia/out/Release-x64 \
          -DSKIA_LIBRARY=$GITHUB_WORKSPACE/deps/skia/out/Release-x64/libskia.a \
          ..

    - name: Build with Ninja
      run: |
        cd build
        ninja aseprite

    - name: Upload macOS Intel artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-macos-intel
        path: build/bin/aseprite

  build-macos-arm:
    runs-on: macos-latest
    needs: get-skia-version
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install macOS dependencies
      run: |
        brew update
        brew uninstall --ignore-dependencies cmake || true
        brew install cmake ninja

    - name: Download Skia for macOS (ARM)
      run: |
        SKIA_VERSION="${{ needs.get-skia-version.outputs.version }}"
        SKIA_URL="https://github.com/aseprite/skia/releases/download/$SKIA_VERSION/Skia-macOS-Release-arm64.zip"
        
        # 使用 curl 下载并验证文件大小
        echo "Downloading Skia from: $SKIA_URL"
        curl -L "$SKIA_URL" -o skia-macos-arm.zip
        
        # 检查文件大小是否合理（至少 10MB）
        FILE_SIZE=$(stat -f%z skia-macos-arm.zip)
        if [ "$FILE_SIZE" -lt 10000000 ]; then
            echo "Error: Downloaded file is too small ($FILE_SIZE bytes). Contents:"
            cat skia-macos-arm.zip
            exit 1
        fi
        
        # 创建目标目录
        mkdir -p deps/skia
        
        # 解压文件
        unzip skia-macos-arm.zip -d deps/skia
        
        # 验证解压结果
        if [ ! -d "deps/skia/out/Release-arm64" ]; then
            echo "Error: Skia extraction failed. Directory structure not found."
            exit 1
        fi

    - name: Configure CMake for ARM
      run: |
        # 创建构建目录
        mkdir build
        cd build
        
        # 配置 CMake
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=$GITHUB_WORKSPACE/deps/skia \
          -DSKIA_LIBRARY_DIR=$GITHUB_WORKSPACE/deps/skia/out/Release-arm64 \
          -DSKIA_LIBRARY=$GITHUB_WORKSPACE/deps/skia/out/Release-arm64/libskia.a \
          -DPNG_ARM_NEON=on \
          ..

    - name: Build with Ninja
      run: |
        cd build
        ninja aseprite

    - name: Upload macOS ARM artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-macos-arm
        path: build/bin/aseprite

  build-linux:
    runs-on: ubuntu-20.04
    needs: get-skia-version
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev

    - name: Download Skia for Linux
      run: |
        SKIA_VERSION="${{ needs.get-skia-version.outputs.version }}"
        SKIA_URL="https://github.com/aseprite/skia/releases/download/$SKIA_VERSION/Skia-Linux-Release-x64.zip"
        
        # 下载文件
        echo "Downloading Skia from: $SKIA_URL"
        wget "$SKIA_URL" -O skia-linux.zip
        
        # 检查文件大小
        FILE_SIZE=$(stat -c%s skia-linux.zip)
        if [ "$FILE_SIZE" -lt 10000000 ]; then
            echo "Error: Downloaded file is too small ($FILE_SIZE bytes). Contents:"
            cat skia-linux.zip
            exit 1
        fi
        
        # 创建目标目录
        mkdir -p deps/skia
        
        # 解压文件
        unzip skia-linux.zip -d deps/skia
        
        # 验证解压结果
        if [ ! -d "deps/skia/out/Release-x64" ]; then
            echo "Error: Skia extraction failed. Directory structure not found."
            exit 1
        fi

    - name: Configure CMake for Linux
      run: |
        # 创建构建目录
        mkdir build
        cd build
        
        # 配置 CMake
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_CXX_FLAGS="-stdlib=libstdc++" \
          -DCMAKE_EXE_LINKER_FLAGS="-stdlib=libstdc++" \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=$GITHUB_WORKSPACE/deps/skia \
          -DSKIA_LIBRARY_DIR=$GITHUB_WORKSPACE/deps/skia/out/Release-x64 \
          -DSKIA_LIBRARY=$GITHUB_WORKSPACE/deps/skia/out/Release-x64/libskia.a \
          ..

    - name: Build with Ninja
      run: |
        cd build
        ninja aseprite

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-linux
        path: build/bin/aseprite

  create-release:
    needs: [build-windows, build-macos-intel, build-macos-arm, build-linux]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/aseprite-windows/aseprite.exe
          artifacts/aseprite-macos-intel/aseprite
          artifacts/aseprite-macos-arm/aseprite
          artifacts/aseprite-linux/aseprite
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
